@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using System.IO
@using HiddenVilla_Server.Service.IService
@inject IHotelRoomRepository _HotelRoomRepository
@inject IHotelRoomImageRepository _HotelRoomImageRepository
@inject NavigationManager _NavigationManager
@inject IJSRuntime _JsRuntime
@inject IFileUpload _FileUpload

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">

                <EditForm Model="@HotelRoomModel" OnValidSubmit="HandleHotelRoomSubmit">

                    <DataAnnotationsValidator/>
                    @* <ValidationSummary /> *@

                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="() => HotelRoomModel.Name"/>
                    </div>

                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="() => HotelRoomModel.Occupancy"/>
                    </div>

                    <div class="form-group">
                        <label>Regular Rate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="() => HotelRoomModel.RegularRate"/>
                    </div>

                    <div class="form-group">
                        <label>Sq feet</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                        <ValidationMessage For="() => HotelRoomModel.SqFt"/>
                    </div>

                    <div class="form-group">
                        <label>Description</label>
                        <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>
                        <ValidationMessage For="() => HotelRoomModel.Details"/>
                    </div>

                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                            {
                                int serial = 1;
                                foreach (var roomImage in HotelRoomModel.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@roomImage') 50% 50%;">
                                            <span class="room-image-title">@serial</span>
                                        </div>
                                        <button type="button" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                    </div>

                    <div class="form-group">
                        <button class="btn btn-outline-success btn-group">@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-outline-secondary btn-group">Go Back</NavLink>
                    </div>


                </EditForm>

            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDTO HotelRoomModel { get; set; }
    private string Title { get; set; }
    public HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Title = "Update";

    // retrieve the hotel room details
            HotelRoomModel = await _HotelRoomRepository.GetHotelRoom(Id.Value);

            if (HotelRoomModel?.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            Title = "Create";

    // create
            HotelRoomModel = new HotelRoomDTO();
        }
    }

    private async Task HandleHotelRoomSubmit()
    {
        try
        {
    // we can access the variables through the model
            var roomDetailByName = await _HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailByName != null)
            {
    // room with that name already exists
                await _JsRuntime.ToastrError("Room with the name already exists");
                return;
            }

            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
    // update  
                var updateRoomResult = await _HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                await _JsRuntime.ToastrSuccess("Hotel Room Updated Successfully");
            }
            else
            {
    // create
                var createdResult = await _HotelRoomRepository.CreateHotelRoom(HotelRoomModel);

    // add the images
                await AddHotelRoomImage(createdResult);

                await _JsRuntime.ToastrSuccess("Hotel Room Created Successfully");
            }
        }
        catch (Exception e)
        {
    // log exceptions
        }

    // Navigate back to the index page
        _NavigationManager.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
    // means files have been uploaded
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg"
                        || fileInfo.Extension.ToLower() == ".png"
                        || fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await _FileUpload.UploadFile(file);

    // add the path to the images list to the db
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await _JsRuntime.ToastrError("Please select .jpg, .png, .jpeg file only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
    // this means it is the first image we are uploading
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await _JsRuntime.ToastrError("Image uploading failed");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            await _JsRuntime.ToastrError(ex.Message);
        }
    }

    private async Task AddHotelRoomImage(HotelRoomDTO roomDetails)
    {
        foreach (var imageUrl in HotelRoomModel.ImageUrls)
        {
            RoomImage = new HotelRoomImageDTO()
            {
                RoomId = roomDetails.Id,
                RoomImageUrl = imageUrl
            };

            await _HotelRoomImageRepository.CreateHotelRoomImage(RoomImage);
        }
    }
}